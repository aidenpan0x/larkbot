AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Sam template for larkbot deployment on AWS

Resources:
### Create request 3 DynamoDB tables
  LarkBotCfgtable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: key
        Type: String
      TableName: bot_config

  LarkBotAudittable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: key
        Type: String
      TableName: audit

  LarkBotCasestable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: card_msg_id
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: card_msg_id-index
          KeySchema:
            - AttributeName: card_msg_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: status-type-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: type
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TableName: bot_cases

  ### Create Lambda role
  LarkBotPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LarkbotPolicy
      Roles:
        - !Ref LarkBotRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:*"
            Resource: "*"
  ## Fix me: restrict access to resource level

  LarkBotLambdaBasicExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LarkbotLambdaExecutionPolicy
      Roles:
        - !Ref LarkBotRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: "*"

  LarkBotLambdaXRayDaemonWriteAccess:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LarkBotLambdaXRayDaemonWriteAccess
      Roles:
        - !Ref LarkBotRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "xray:PutTraceSegments"
              - "xray:PutTelemetryRecords"
              - "xray:GetSamplingRules"
              - "xray:GetSamplingTargets"
              - "xray:GetSamplingStatisticSummaries"
            Resource: "*"
  ## Fix me: restrict access to resource level

  LarkBotRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow Lark bot to access DynamoDB tables
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"


  ### Create Lambda function
  LarkBotLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      Description: "Core logic of LarkBot"
      CodeUri: lambda-lark-bot/
      Handler: bin/main
      Runtime: go1.x
      Architectures:
        - x86_64
      MemorySize: 128
      Environment:
        Variables:
          CFG_KEY: LarkBotProfile-0
          CASE_LANGUAGE: zh
      Timeout: 60
      Role: !GetAtt LarkBotRole.Arn
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: "rate(2 minutes)"
            Description: "Execute Lark bot every 2 minutes"
            Input: '{"schema":"2.0","event":{"message":{"message_type":"fresh_comment"}}}'
            Enabled: true
      #Tracing: Active --- The permession X-Ray required is defined by default. Changing to Active to enable the Lambda X-Ray tracing.
      #Tracing: PassThrough
      Tracing: Active

  ### Create ApiGatewayCloudWatchLogRole to allow ApiGateway write logs to CloudWatch
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn


  ### Create API
  LarkBotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API used for LarkBot requests
      FailOnWarnings: true
      Name: !Ref AWS::StackName
      EndpointConfiguration:
        Types:
          - REGIONAL

  ### Adding API Gateway permission to Lambda function
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt LarkBotLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${LarkBotApi}/*"

  ### Create Stage
  LarkBotApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Deployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref LarkBotApi
      StageName: Prod
      TracingEnabled: true
      ### TracingEnabled: false

  ### Create Deployment
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LarkBotRequestPOST
    Properties:
      RestApiId: !Ref LarkBotApi

  ### Create Method
  LarkBotRequestPOST:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LarkBotLambda.Arn}/invocations"

        ### Integration Response
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""

      #RequestParameters:
      ResourceId: !GetAtt LarkBotApi.RootResourceId
      RestApiId: !Ref LarkBotApi

      ### Method Response
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

Outputs:
  LarkBotEndpoint:
    Description: Endpoint of the LarkBot 
    Value: !Sub "https://${LarkBotApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/Prod"